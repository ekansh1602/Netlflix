{"version":3,"sources":["logo.svg","Nav.js","axios.js","request.js","Banner.js","Row.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","useState","show","handleShow","useEffect","window","addEventListener","scrollY","removeEventListener","className","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentariesMovies","Banner","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","class","Row","props","movies","trailerUrl","setTrailerUrl","fetchUrl","map","onClick","moviename","orginal_name","movieTrailer","then","url","urlParamV","URLSearchParams","URL","search","catch","err","isLargeRow","poster_path","id","videoId","opts","height","width","playVars","autoplay","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64f4799b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Nav.css';\n\nfunction Nav(){\n\n    const [show,handleShow] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if(window.scrollY > 100){\n                handleShow(true);\n            }\n            else{\n                handleShow(false);\n            }\n        })\n        return () => {\n            window.removeEventListener(\"scroll\");\n        }\n    }\n    ,\n    []);\n\n    return(\n        <>\n        <div className={`nav ${show && \"nav_black\"}`}>\n            <img className=\"nav_logo\"\n            src=\"https://download.logo.wine/logo/Netflix/Netflix-Logo.wine.png\"\n            alt=\"Netflix\"\n            />\n            <img className=\"nav_avatar\"\n            src=\"https://pbs.twimg.com/profile_images/1198967349312991232/lXeo3AMv_400x400.png\"\n            alt=\"Netflix Avatar\"\n            />\n        </div>\n        </>\n    );\n}\n\nexport default Nav;","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;","const API_KEY = \"b17233353a8db13f8ea4839313e4372f\";\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&langauge=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentariesMovies: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\n\nexport default requests;","import React, { useEffect, useState } from 'react';\nimport axios from './axios';\nimport requests from './request';\nimport './Banner.css';\n//import ReactDOM from 'react-dom';\n\n//rfce - SHORTCUT TO GET ALL THE BOILERPLATE INITIAL CODE\n\n\n//IMAGE ADDRESS IS DIFFERENT FROM THE RESPONSE SO APPENDING IMAGE PATH TO THIS ADDRESS\nconst base_image_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Banner(){\n    const [movie,setMovie] =  useState([]);\n\n    // SNIPPET OF CODE WHICH RUNS BASED ON A SPECIFIC CONDITION. \n    useEffect( () => {\n        async function fetchData(){\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            //console.log(request);\n            setMovie(request.data.results[Math.floor(Math.random()*request.data.results.length-1)]);\n            return request;\n            //GETTING RANDOM MOVIE FUNCTION - Math.floor(Math.random()*request.data.results.length-1);\n        }\n        //CALLING THE FUNCTION\n        fetchData();\n    }\n    ,\n    //IF [] IS EMPTY , CODE WILL RUN ONCE -<ALSO-> NOTE!! - WHEN ANY OUTSIDE VARIABLE IS USED INSIDE USEEFFECT\n    //FUNCTION ALWAYS PUT IT INSIDE THIS ARRAY PARAMENTER\n    []);\n    console.log(movie);\n\n    /*\n    //TRUNCATE A STRING AFTER n CHARACTERS\n    function truncate(str,n){\n        return str?.length > n ? str.substr(0,n-1) + \"...\" : str;\n    }\n    */\n\n    return(\n        <>\n        <header className=\"banner\"\n        style = {\n            {\n                backgroundSize: \"cover\",\n                backgroundImage: `url(\n                    ${base_image_url}${movie?.backdrop_path}\n                )`,\n                backgroundPosition: \"center center\"\n            }\n        }\n         \n        >\n            <div className=\"banner_contents\">\n                {/* ? IS USED AS AN OPTIONAL SO THAT THE APPLICATION DOESN'T CRASHES */}\n                <h1 className=\"banner_title\">{movie?.title || movie?.name || movie?.original_name}</h1>\n                <div className=\"banner_buttons\">\n                    <button className=\"banner_button\">Play</button>\n                    <button className=\"banner_button\">My List</button>\n                </div>\n                <h1 className=\"banner_description\">\n                    {/*OPTIONAL TO USE -  {truncate(movie?.overview, 150)} */}\n                    {movie?.overview}\n                </h1>\n            </div>\n            <div class=\"banner_fadeBottom\"/>\n        </header>\n        </>\n    );\n}\n\nexport default Banner;","import React, { useEffect, useState } from 'react';\n//import ReactDOM from 'react-dom';\nimport axios from './axios';\nimport './Row.css';\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\n//rfce - SHORTCUT TO GET ALL THE BOILERPLATE INITIAL CODE\n\n\n//IMAGE ADDRESS IS DIFFERENT FROM THE RESPONSE SO APPENDING IMAGE PATH TO THIS ADDRESS\nconst base_image_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row(props){\n    const [movies,setMovie] = useState([]);\n    const [trailerUrl,setTrailerUrl] = useState(\"\");\n\n    // SNIPPET OF CODE WHICH RUNS BASED ON A SPECIFIC CONDITION. \n    useEffect( ()=> {\n        async function fetchData(){\n            const request = await axios.get(props.fetchUrl);\n            setMovie(request.data.results);\n            //console.log(request);\n            return request;\n        }\n        //CALLING THE FUNCTION\n        fetchData();\n    }\n    ,\n    //IF [] IS EMPTY , CODE WILL RUN ONCE -<ALSO-> NOTE!! - WHEN ANY OUTSIDE VARIABLE IS USED INSIDE USEEFFECT\n    //FUNCTION ALWAYS PUT IT INSIDE THIS ARRAY PARAMENTER\n    [props.fetchUrl]);\n\n    //console.log(movie);\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playVars: {\n            autoplay: 1\n        },\n    };\n\n    const movieClicked = (moviename) => {\n        console.log(moviename);\n        if (trailerUrl != \"\") setTrailerUrl(\"\");\n        else {\n          movieTrailer(moviename)\n            .then((url) => {\n              const urlParamV = new URLSearchParams(new URL(url).search);\n              setTrailerUrl(urlParamV.get(\"v\"));\n            })\n            .catch((err) => console.log(err));\n        }\n      };\n    \n\n    return(\n        <>\n        <div className=\"row\">\n            <h2>{props.title}</h2>\n            <div className=\"row_posters\">\n                {movies.map(movie => (\n                <img \n                key={movie.id}\n                onClick={() =>\n                    movieClicked(movie.name || movie.title || movie.orginal_name)\n                }\n                className={`row_poster ${props.isLargeRow && \"row_posterLarge\"}`} \n                src ={`${base_image_url}${props.isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n                alt={movie.name}/>\n                ))}\n            </div>\n            {trailerUrl !==\"\" && <YouTube videoId={trailerUrl} opts={opts}/>}\n        </div>\n        </>\n    );\n}\n\nexport default Row;","import logo from './logo.svg';\nimport './App.css';\nimport Nav from './Nav';\nimport Banner from './Banner';\nimport Row from './Row';\nimport requests from './request';\n\nfunction App() {\n  return (\n    <>\n    <div className=\"app\">\n    <Nav/>\n    <Banner />\n    <Row \n    title=\"NETFLIX ORIGINALS\" \n    fetchUrl={requests.fetchNetflixOriginals}\n    isLargeRow={true}\n    />\n    <Row title=\"Trending\" fetchUrl={requests.fetchTrending}/>\n    <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n    <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n    <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n    <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n    <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n    <Row title=\"Documentaries Movies\" fetchUrl={requests.fetchDocumentariesMovies}/>\n    <div class=\"site-footer-wrapper centered dark\">\n    <div class=\"footer-divider\"></div>\n    <div class=\"site-footer\">\n      <p class=\"footer-top\">© Ekansh Anand Srivastava</p>\n      </div>\n    </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}